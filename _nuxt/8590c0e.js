(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{238:function(e,o,c){var map={"./2021/create-blog-github.md":239,"./2021/webpack-pack-path.md":240};function n(e){var o=t(e);return c(o)}function t(e){if(!c.o(map,e)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return map[e]}n.keys=function(){return Object.keys(map)},n.resolve=t,e.exports=n,n.id=238},239:function(e,o){e.exports={attributes:{title:"如何使用nuxtJs在github.io搭建自己博客",des:"让你DIY专属于自己的博客",createTime:"2021-6-2"},html:'<h1>如何使用<code>nuxtJs</code>在<code>github.io</code>搭建自己博客</h1>\n<blockquote>\n<p>可以使用<code>nuxtJS</code> <code>DIY</code>一个专属自己的博客，利用 <code>markdown</code> 来记录博客</p>\n</blockquote>\n<h2>概述</h2>\n<ol>\n<li>设置 <code>github</code> 上的个人主页</li>\n<li>在本地构建项目</li>\n<li>部署踩坑</li>\n</ol>\n<blockquote>\n<h3>设置 <code>github</code> 上的个人主页</h3>\n</blockquote>\n<ol>\n<li>\n<p>新建一个项目<br>\n登录<code>github</code>以后，点击主页的 <code>New</code> 按钮新建一个代表个人主页的仓库\n<img src="../md/create-blog-github/step_1.png" alt="">\n仓库名字自取，可以取<code>姓名全拼</code> + <code>github.io</code>，博主的个人主页仓库名叫就是：<code>limingcan562.github.io</code></p>\n</li>\n<li>\n<p>完成以后回到主页你会发现仓库多了一个叫 <code>limingcan562.github.io</code> 的仓库（<em>请取你自己的名字</em>），进入以后点击 <code>Settings</code>\n<img src="../md/create-blog-github/step_3.png" alt=""></p>\n</li>\n<li>\n<p>设置未来 <code>github.io</code> 主页的链接<br>\n进入到自己刚刚建好的仓库进行配置\n<img src="../md/create-blog-github/step_2.png" alt=""></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><code>Repository name</code> 请填写前面的 <code>Owner</code> 名字 + <code>.github.io</code></li>\n<li>如图示，<code>Repository name</code> 就应该写 <code>limingcan562.github.io</code> 这样后面可以直接用 <code>limingcan562.github.io</code> 打开你的个人主页</li>\n</ul>\n</li>\n<li>\n<p>修改个人主页映射对应的仓库分支\n<img src="../md/create-blog-github/step_4.png" alt=""></p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>我是将打包好的文件推送到仓库的<code>gh-pages</code>分支，所以需要把个人主页映射到<code>gh-pages</code>分支，这样当你打开个人主页是，其实看到的是编译好的<code>gh-pages</code>分支内容</li>\n<li>推送 <code>gh-pages</code> 也是个坑，后续会讲</li>\n</ul>\n</li>\n<li>\n<p>OK，目前我们<code>github</code>部分就完成了</p>\n</li>\n</ol>\n<blockquote>\n<h3>在本地构建项目</h3>\n</blockquote>\n<p>这个就不过多的赘述了，因为我的博客是用<code>nuxtJs</code>做的，所以直接上官网看看文档，直接搞个<code>demo</code>项目下来，这里主要介绍下我用到的插件文档</p>\n<ul>\n<li><a href="https://www.nuxtjs.cn/"><code>nuxtJs</code></a></li>\n<li><a href="https://www.npmjs.com/package/"><code>frontmatter-markdown-loader</code></a>用来编译<code>md</code>的<code>loader</code></li>\n<li><a href="https://www.npmjs.com/package/github-markdown-css"><code>github-markdown-css</code></a> 美化编译后的<code>md</code></li>\n<li><a href="https://www.npmjs.com/package/prismjs"><code>prismjs</code></a> 用来高亮<code>md</code></li>\n<li><a href="https://www.npmjs.com/package/gh-pages"><code>gh-pages</code></a> 用来发布打包文件到<code>github</code>的<code>gh-pages</code>分支</li>\n</ul>\n<blockquote>\n<h3>部署踩坑</h3>\n</blockquote>\n<ol>\n<li>用<code>soureceTree</code>一直推不上<code>github</code>或者拉不下代码，等了好久以后报错问题！</li>\n<li>使用<code>gh-pages</code>推送分支部署时，老是报错！</li>\n<li>代码推到<code>gh-pages</code> 分支后，为什么不能预览，资源<code>404</code>！</li>\n</ol>\n<ul>\n<li>\n<h4>用<code>soureceTree</code>一直推不上<code>github</code>或者拉不下代码，等了好久以后报错问题！</h4>\n</li>\n</ul>\n<p>不知道用<code>soureceTree</code>的同学有没有遇到过，在拉<code>github</code>代码或者推代码到<code>github</code>时，发现等了很久，结果后面发现各种各样的报错，或者一直弹出要输入github账号密码，就十分的烦躁...但后面上网各种找答案以后，终于有办法可以解决：<br>\n<strong>不要用<code>https</code>的方式连接<code>github</code>仓库，一定要用<code>ssh</code>方式连接仓库</strong></p>\n<p><code>mac</code>端跟着网上配置<code>ssh</code>到<code>github</code>的步骤走，问题不大，但是在生成<code>ssh</code>时，会提示要你输入密码，此时不要输入密码，一路回车就好了，这样后面推送代码的时候，就不会再提示输入密码。这里讲下<code>window</code>环境下怎么弄<br>\n在配置好<code>ssh</code>到<code>github</code>以后，我们会发现<code>window</code>的<code>souceTree</code>拉取代码还是有问题，这里需要设置一下：<br>\n进入<code>工具</code> --&gt; <code>选项</code>\n<img src="../md/create-blog-github/step_5.png" alt="">\n这样设置好以后，关掉<code>sourceTree</code>重新推一下就好了</p>\n<ul>\n<li>\n<h4>使用<code>gh-pages</code>推送分支部署时，老是报错！</h4>\n</li>\n</ul>\n<p>有时我们可能使用<code>gh-pages</code>推送分支，或者把远程<code>gh-pages</code>删除在推送，或者做了什么乱七八糟的操作以后，发现经常报错，类似：</p>\n<pre><code class="language-javascript">{&quot;code&quot;:128,&quot;message&quot;:&quot;fatal: couldn\'t find remote ref refs/heads/gh-pages\\n&quot;,&quot;name&quot;:&quot;ProcessError&quot;}\n</code></pre>\n<p>就会十分的崩溃，但是在查阅了很多资料以后发现还是有解决方案的：</p>\n<ol>\n<li>在项目下的终端运行：<code>node node_modules/gh-pages/bin/gh-pages-clean</code>；然后再推送，你会发现问题迎刃而解！可以参考<a href="https://www.bountysource.com/teams/gh-pages/issues">这篇文章</a></li>\n<li><strong>将<code>deploy.js</code>里面的<code>repo</code>改成<code>ssh</code>链接，就好了（这个是最重要的！）</strong></li>\n</ol>\n<ul>\n<li>\n<h4>代码推到<code>gh-pages</code> 分支后，为什么不能预览，资源<code>404</code>！</h4>\n</li>\n</ul>\n<p>首先，我们使用<code>gh-pages</code>提交代码到<code>gh-pages</code>分支时，我们会看到，里面的文件都有，但是就是没有<code>.nojekyll</code>，<strong>没有<code>.nojekyll</code></strong> 是最根本的原因，默认<code>gh-pages</code>是不会把点文件推上去的\n因为如果<code>github</code>上没有这个文件，是会忽略掉其他<code>_</code>开头的文件的，因此即使<code>github</code>上有<code>_nuxt</code>文件，一样会找不到资源，因为它会被略了，具体可以参考<a href="https://www.cnblogs.com/babywhale/p/13560573.html">这篇文章</a><br>\n所以我们需要在<code>deploy.js</code>文件里改一下配置：</p>\n<pre><code class="language-javascript">ghpages.publish(\'./dist\', {\n    branch: \'gh-pages\',\n    repo: \'你的仓库ssh地址\',\n    dotfiles: true,  // 很重要！！\n    message: \'deploy\'\n}, err =&gt; {});\n</code></pre>\n<p>重点是把<code>dotfiles: true</code>，这样<code>.nojekyll</code>才能推上去</p>\n'}},240:function(e,o){e.exports={attributes:{title:"Webpack 打包时，如何保留img文件夹里原有的文件夹",des:"保留img文件夹里面原始文件，更好管理",createTime:"2021-6-21"},html:'<h2>场景</h2>\n<p>有时我们在开发模式时，会在<code>img</code>文件里建很多的不同的文件夹，方便我们开发过程中更好的管理，就像这样：<br>\n<img src="../md/webpack-pack-path/pic_1.png" alt="">\n我们把一些场景的资源用不同的文件存放，这样在我们开发的过程中，可以更快更有效地管理我们场景的资源，尤其是在做游戏项目。<br>\n当我们项目开发完了，打包时，<code>webpack</code>内部会将我们应用的图片资源，全部打包到一文件夹中，就像下面这样：\n<img src="../md/webpack-pack-path/pic_2.png" alt="">\n但是如果遇到项目上线了，只是紧急替换图片，不需要改逻辑，又或者有些奇葩客户，说打包出来图片文件不要混在一起，要分开，这样方便他们自己修改别的版本（我就遇到过），这就很尴尬了，光是找替换的文件都要找半天，所以这时如果我们在打包的时候，保留了原本<code>img</code>里面的文件夹，那就很舒服</p>\n<h2>实现</h2>\n<p><code>webpack</code>🐂🍺的地方不需要再说啦，现在说下怎么实现在打包的时候，保留<code>img</code>文件夹里面的文件夹，其实也不是很难<br>\n<code>webpack</code>配置：</p>\n<pre><code class="language-javascript">// webpack.config.js\n{\n    test: /\\.(png|jpg|jpeg|gif)$/,\n    use: [\n        {\n            loader: \'url-loader\',\n            options: {\n                //利用[path]路径获取文件夹名称并设置文件名\n                name: \'[path]/[name].[ext]\',\n                limit: 1, \n                //过滤掉[path]的相对路径\n                context: path.resolve(__dirname, \'../dev/assets\'),\n            }\n        }\n    ]\n},\n</code></pre>\n<p>我的开发目录结构：\n<img src="../md/webpack-pack-path/pic_3.png" alt=""></p>\n<p>打包以后的目录：\n<img src="../md/webpack-pack-path/pic_4.png" alt=""></p>\n<p>这样做可以过滤掉开发目录前面的路径：</p>\n<pre><code class="language-javascript">context: path.resolve(__dirname, \'../dev/assets\')\n</code></pre>\n<p>如果为了防止缓存，还可以在打包出来的图片文件加上<code>hash</code>：</p>\n<pre><code class="language-javascript">name: \'[path]/[name]-[hash:8].[ext]\',\n</code></pre>\n'}},243:function(e,o,c){},248:function(e,o,c){"use strict";c(243)},252:function(e,o,c){"use strict";c.r(o);c(38),c(27),c(37),c(47),c(48);var n=c(23),t=c(7),d=(c(54),c(19),c(16),c(36),c(55),c(56),c(25),c(73),c(29),c(18));function r(object,e){var o=Object.keys(object);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(object);e&&(c=c.filter((function(e){return Object.getOwnPropertyDescriptor(object,e).enumerable}))),o.push.apply(o,c)}return o}function l(e){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?r(Object(source),!0).forEach((function(o){Object(n.a)(e,o,source[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(source)):r(Object(source)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(source,o))}))}return e}var h={layout:"posts",asyncData:function(e){return Object(t.a)(regeneratorRuntime.mark((function o(){var n,t,d;return regeneratorRuntime.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return n=e.params,o.next=3,c(238);case 3:return(t=o.sent).keys().forEach((function(e){e.includes(n.id)&&(d=t(e))})),o.abrupt("return",{posts:d});case 6:case"end":return o.stop()}}),o)})))()},head:function(){return{title:"lMC`s Blog | posts",meta:[{hid:"description",name:"description",content:this.posts.title},{hid:"keywords",name:"keywords",content:this.posts.des}]}},data:function(){return{init:1,bounceAni:0,bounceOut:0,isMobile:0}},created:function(){this.isMobile=this.isMobileEvt()},computed:l({},Object(d.c)(["canScroll","viewClickTip"])),methods:l(l({},Object(d.b)(["resetValueEvt"])),{},{isMobileEvt:function(){return!!navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)},closeEvt:function(){var e=this;this.init=0,this.bounceOut=1,setTimeout((function(){e.resetValueEvt({key:"viewClickTip",value:1})}),1e3)}}),mounted:function(){var e=this;this.isMobileEvt()&&(this.bounceAni=1,document.querySelector("#markdown-body").addEventListener("mousedown",(function(o){var c=o.target.src;c&&(e.resetValueEvt({key:"previewPicSrc",value:c}),e.resetValueEvt({key:"showPreviewPop",value:1}),e.resetValueEvt({key:"canScroll",value:0}))})))}},m=(c(248),c(9)),component=Object(m.a)(h,(function(){var e=this,o=e.$createElement,c=e._self._c||o;return c("main",[e.viewClickTip?e._e():c("div",{class:["preview_tip_content",{init:e.init},{bounceAni:e.bounceAni&&!e.bounceOut},{bounceOut:e.bounceOut}],on:{mousedown:e.closeEvt}},[c("div",{staticClass:"line"}),e._v(" "),e._m(0),e._v(" "),c("div",{staticClass:"line line2"}),e._v(" "),c("p",{staticClass:"btn"},[e._v("知道了")])]),e._v(" "),c("article",{staticClass:"md_content markdown-body",attrs:{id:"markdown-body"},domProps:{innerHTML:e._s(e.posts.html)}})])}),[function(){var e=this,o=e.$createElement,c=e._self._c||o;return c("div",{staticClass:"text_contnet"},[c("p",{staticClass:"tip"},[e._v("点击图片可以预览喔")])])}],!1,null,"7542f04a",null);o.default=component.exports}}]);